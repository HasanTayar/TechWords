{"ast":null,"code":"import { Cart } from '../model/cart';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.cartUrl = 'http://localhost:3000/cart';\n    this.carts = [];\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      return of(result);\n    };\n  }\n  getCarts() {\n    return this.http.get(this.cartUrl).pipe(catchError(this.handleError('getCarts', [])));\n  }\n  getCart(id) {\n    return this.http.get(`${this.cartUrl}/${id}`).pipe(catchError(this.handleError(`getCart id=${id}`)));\n  }\n  addCart(cart) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.cartUrl, cart, httpOptions).pipe(catchError(this.handleError('addCart')));\n  }\n  updateCart(cart) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.put(`${this.cartUrl}/${cart.id}`, cart, httpOptions).pipe(catchError(this.handleError('updateCart')));\n  }\n  deleteCart(cart) {\n    return this.http.delete(`${this.cartUrl}/${cart.id}`).pipe(catchError(this.handleError('deleteCart')));\n  }\n  saveCartToDb(cart) {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // User is not logged in, so return without saving the cart\n      return;\n    }\n    // User is logged in, so update the cart in the database\n    this.updateCart(cart).subscribe(() => {\n      console.log(`Cart saved to database`);\n    });\n  }\n  getUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not found, so return a new cart\n      return new Cart();\n    }\n    let userCart;\n    this.getCarts().subscribe(carts => {\n      userCart = carts.find(c => c.user === userEmail);\n      if (!userCart) {\n        // Cart for the user is not found, so return a new cart\n        userCart = new Cart();\n        userCart.user = userEmail;\n        this.addCart(userCart).subscribe(c => {\n          userCart.id = c.id;\n        });\n      }\n    });\n    return userCart;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Cart","HttpHeaders","catchError","of","CartService","constructor","router","http","handleError","operation","result","error","console","getCarts","get","cartUrl","pipe","getCart","id","addCart","cart","httpOptions","headers","post","updateCart","put","deleteCart","delete","saveCartToDb","userEmail","localStorage","getItem","subscribe","log","getUserCart","userCart","carts","find","c","user","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart, CartProduct } from '../model/cart';\nimport { Product } from '../model/product';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cartUrl = 'http://localhost:3000/cart';\n  private carts: Cart[] = [];\n\n  constructor(private router: Router, private http: HttpClient) { }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n  getCarts(): Observable<Cart[]> {\n    return this.http.get<Cart[]>(this.cartUrl).pipe(\n      catchError(this.handleError<Cart[]>('getCarts', []))\n    );\n  }\n\n  getCart(id: number): Observable<Cart> {\n    return this.http.get<Cart>(`${this.cartUrl}/${id}`).pipe(\n      catchError(this.handleError<Cart>(`getCart id=${id}`))\n    );\n  }\n\n  addCart(cart: Cart): Observable<Cart> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.post<Cart>(this.cartUrl, cart, httpOptions).pipe(\n      catchError(this.handleError<Cart>('addCart'))\n    );\n  }\n\n  updateCart(cart: Cart): Observable<Cart> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.put<Cart>(`${this.cartUrl}/${cart.id}`, cart, httpOptions).pipe(\n      catchError(this.handleError<Cart>('updateCart'))\n    );\n  }\n\n  deleteCart(cart: Cart): Observable<Cart> {\n    return this.http.delete<Cart>(`${this.cartUrl}/${cart.id}`).pipe(\n      catchError(this.handleError<Cart>('deleteCart'))\n    );\n  }\n\n  saveCartToDb(cart: Cart) {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // User is not logged in, so return without saving the cart\n      return;\n    }\n\n    // User is logged in, so update the cart in the database\n    this.updateCart(cart).subscribe(() => {\n      console.log(`Cart saved to database`);\n    });\n  }\n\n  getUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not found, so return a new cart\n      return new Cart();\n    }\n    let userCart: Cart;\nthis.getCarts().subscribe(carts => {\n  userCart = carts.find(c => c.user === userEmail);\n  if (!userCart) {\n    // Cart for the user is not found, so return a new cart\n    userCart = new Cart();\n    userCart.user = userEmail;\n    this.addCart(userCart).subscribe(c => {\n      userCart.id = c.id;\n    });\n  }\n});\n\nreturn userCart;\n  }\n    "]},"metadata":{},"sourceType":"module","externalDependencies":[]}