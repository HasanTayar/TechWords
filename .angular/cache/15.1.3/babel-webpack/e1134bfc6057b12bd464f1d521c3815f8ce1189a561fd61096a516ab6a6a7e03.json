{"ast":null,"code":"import { Cart } from '../model/cart';\nimport { catchError, of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.cart = {};\n    this.apiURL = 'http://localhost:3000/';\n    this.headers = {\n      'content-type': 'application/json'\n    };\n    this.cart[0] = new Cart();\n  }\n  getUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (userEmail == null) {\n      return this.cart[0];\n    }\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    let cart = this.cart[userEmail];\n    if (!cart) {\n      cart = new Cart();\n      this.cart[userEmail] = cart;\n    }\n    return cart;\n  }\n  addToCart(product) {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n      existingProduct.qty++;\n      cart.totalPrice += product.product.price;\n    } else {\n      alert(\"item added to cart\");\n      cart.products.push(product);\n      cart.totalPrice += product.product.price;\n    }\n  }\n  removeFromCart(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n  }\n  quantityUp(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n  }\n  quantityDown(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n  }\n  getItems() {\n    const cart = this.getUserCart();\n    return cart.products;\n  }\n  getTotalPrice() {\n    const cart = this.getUserCart();\n    return cart.totalPrice;\n  }\n  clearCart() {\n    const cart = this.getUserCart();\n    cart.products = [];\n    cart.totalPrice = 0;\n    return cart.products;\n  }\n  payment(checkoutData) {\n    const userEmail = localStorage.getItem('user');\n    if (checkoutData.products.length > 0) {\n      let body = JSON.stringify({\n        userId: userEmail,\n        products: checkoutData.products,\n        paid: this.cart['paid']\n      });\n      return this.http.post(this.apiURL + 'cart', body, {\n        headers: this.headers\n      }).pipe(catchError(this.handleError));\n    }\n    return of(null);\n  }\n  loadCart() {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`api/cart/${userEmail}`);\n  }\n  saveCart(cart) {\n    const userEmail = localStorage.getItem('user');\n    return this.http.post(`api/cart/${userEmail}`, cart);\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Cart","catchError","of","throwError","CartService","constructor","router","http","cart","getUserCart","userEmail","localStorage","getItem","addToCart","product","existingProduct","products","find","p","title","qty","totalPrice","price","alert","push","removeFromCart","index","indexOf","splice","quantityUp","quantityDown","getItems","getTotalPrice","clearCart","payment","checkoutData","length","body","JSON","stringify","userId","paid","post","apiURL","headers","pipe","handleError","loadCart","get","saveCart","error","ErrorEvent","console","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart, CartProduct } from '../model/cart';\nimport { Product } from '../model/product';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, Observable , of, throwError } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart: { [userId: string]: Cart } = {};\n  apiURL: string = 'http://localhost:3000/';\n  headers = {'content-type':'application/json'};\n  \n  constructor(private router: Router , private http: HttpClient) { \n    this.cart[0] = new Cart();\n  }\n\n  getUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if(userEmail==null){\n      return this.cart[0];\n    }\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    let cart = this.cart[userEmail];\n    if (!cart) {\n      cart = new Cart();\n      this.cart[userEmail] = cart;\n    }\n    return cart;\n  }\n\n  addToCart(product: CartProduct): void {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n        existingProduct.qty++;\n        cart.totalPrice += product.product.price;\n    } else {\n      alert(\"item added to cart\");\n        cart.products.push(product);\n        cart.totalPrice += product.product.price;\n    }\n  }\n\n  removeFromCart(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n  }\n  \n  quantityUp(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n  }\n  \n  quantityDown(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n  }\n  \n  getItems(): CartProduct[] {\n    const cart = this.getUserCart();\n    return cart.products;\n  }\n  \n  getTotalPrice(): number {\n    const cart = this.getUserCart();\n    return cart.totalPrice;\n  }\n  \n  clearCart(): CartProduct[] {\n    const cart = this.getUserCart();\n    cart.products = [];\n    cart.totalPrice = 0;\n    return cart.products;\n  }\n  \n  payment(checkoutData: any): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    if (checkoutData.products.length > 0) {\n      let body = JSON.stringify({\n       \n        userId: userEmail,\n        products: checkoutData.products,\n        paid: this.cart['paid']\n      });\n      return this.http.post(this.apiURL+'cart', body, {\n        headers: this.headers\n      }).pipe(\n        catchError(this.handleError)\n      );\n    }\n    return of(null);\n  }\n  \n  \n  loadCart(): Observable<Cart> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get<Cart>(`api/cart/${userEmail}`);\n  }\n  \n  saveCart(cart: Cart): Observable<Cart> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.post<Cart>(`api/cart/${userEmail}`, cart);\n  }\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    return throwError(\n      'Something bad happened; please try again later.');\n  };\n  }\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}