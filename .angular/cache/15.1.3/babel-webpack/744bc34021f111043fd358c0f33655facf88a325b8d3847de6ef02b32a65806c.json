{"ast":null,"code":"import { Cart } from '../model/cart';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.cartUrl = 'https://jsonplaceholder.typicode.com/cart';\n    this.carts = [];\n  }\n  saveCartToDB(cart) {\n    const userEmail = localStorage.getItem('user');\n    localStorage.setItem(`cart_${userEmail}`, JSON.stringify(cart));\n  }\n  clearCart() {\n    this.cart = new Cart();\n  }\n  getUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    const cart = this.carts.find(c => c.user === userEmail);\n    if (!cart) {\n      const newCart = new Cart();\n      newCart.user = userEmail;\n      this.carts.push(newCart);\n      return newCart;\n    }\n    return cart;\n  }\n  addToCart(product) {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n      existingProduct.qty++;\n      cart.totalPrice += product.product.price;\n    } else {\n      cart.products.push(product);\n      cart.totalPrice += product.product.price;\n    }\n    this.saveCartToDB(cart);\n  }\n  removeFromCart(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n    this.saveCartToDB(cart);\n  }\n  quantityUp(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n    this.saveCartToDB(cart);\n  }\n  quantityDown(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n    this.saveCartToDB(cart);\n  }\n  getItems() {\n    const cart = this.getUserCart();\n    return cart.products;\n  }\n  getTotalPrice() {\n    const cart = this.getUserCart();\n    return cart.totalPrice;\n  }\n  payment() {\n    this.carts.paid = true;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Cart","CartService","constructor","router","http","saveCartToDB","cart","userEmail","localStorage","getItem","setItem","JSON","stringify","clearCart","getUserCart","carts","find","c","user","newCart","push","addToCart","product","existingProduct","products","p","title","qty","totalPrice","price","removeFromCart","index","indexOf","splice","quantityUp","quantityDown","getItems","getTotalPrice","payment","paid","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart, CartProduct } from '../model/cart';\nimport { Product } from '../model/product';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cartUrl = 'https://jsonplaceholder.typicode.com/cart';\n  private carts: Cart[] = [];\n  \n  constructor(private router: Router, private http: HttpClient) { }\n  \n  saveCartToDB(cart: Cart): void {\n    const userEmail = localStorage.getItem('user');\n    localStorage.setItem(`cart_${userEmail}`, JSON.stringify(cart));\n  }\n  clearCart() {\n    this.cart = new Cart();\n  }\n\n  getUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n\n    const cart = this.carts.find(c => c.user === userEmail);\n    if (!cart) {\n      const newCart = new Cart();\n      newCart.user = userEmail;\n      this.carts.push(newCart);\n      return newCart;\n    }\n\n    return cart;\n  }\n\n  addToCart(product: CartProduct): void {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n        existingProduct.qty++;\n        cart.totalPrice += product.product.price;\n    } else {\n        cart.products.push(product);\n        cart.totalPrice += product.product.price;\n    }\n\n    this.saveCartToDB(cart);\n  }\n\n  removeFromCart(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n\n    this.saveCartToDB(cart);\n  }\n  \n  quantityUp(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n\n    this.saveCartToDB(cart);\n  }\n  \n  quantityDown(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n\n    this.saveCartToDB(cart);\n  }\n  \n  getItems(): CartProduct[] {\n    const cart = this.getUserCart();\n    return cart.products;\n  }\n  \n  getTotalPrice(): number {\n    const cart = this.getUserCart();\n    return cart.totalPrice;\n  }\n  payment() {\n    this.carts.paid = true;\n  }\n\n  \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}