{"ast":null,"code":"import { Cart } from '../model/cart';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  removeFromCart(item) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.carts = {};\n    this.baseUrl = \"http://localhost:3000/\";\n    this.headers = {\n      'content-type': 'application/json'\n    };\n    this.carts['anonymous'] = new Cart();\n  }\n  getCurrentUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (userEmail === null) {\n      return this.carts['anonymous'];\n    }\n    let cart = this.carts[userEmail];\n    if (!cart) {\n      cart = new Cart();\n      this.carts[userEmail] = cart;\n    }\n    return cart;\n  }\n  addProductToCart(product) {\n    const cart = this.getCurrentUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n      existingProduct.qty++;\n      cart.totalPrice += product.product.price;\n    } else {\n      cart.products.push(product);\n      cart.Totalprice += product.product.price;\n    }\n  }\n  removeProductFromCart(product) {\n    const cart = this.getCurrentUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.Totalprice -= product.product.price * product.quantity;\n    }\n  }\n  QuantityUp(product) {\n    const cart = this.getCurrentUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].quantity += 1;\n      cart.Totalprice += product.product.price;\n    }\n  }\n  QuantityDown(product) {\n    const cart = this.getCurrentUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].quantity -= 1;\n      cart.Totalprice -= product.product.price;\n    }\n  }\n  getItems() {\n    const cart = this.getCurrentUserCart();\n    return cart.products;\n  }\n  gettotalprice() {\n    const cart = this.getCurrentUserCart();\n    return cart.Totalprice;\n  }\n  clearCart() {\n    const cart = this.getCurrentUserCart();\n    cart.products = [];\n    cart.Totalprice = 0;\n    return cart.products;\n  }\n  makePayment() {\n    const cart = this.getCurrentUserCart();\n    const userEmail = localStorage.getItem('user');\n    if (cart.User === null) {\n      alert(\"you must be logged in to make the payment\");\n      this.router.navigateByUrl('/profile/login'); // navigate the user to the login page\n    } else if (userEmail) {\n      alert(\"Payment Successful\");\n      cart.paymentMade = true;\n      this.saveCart().subscribe();\n      this.clearCart();\n    }\n  }\n  saveCart() {\n    const currentUserCart = this.getCurrentUserCart();\n    let body = JSON.stringify({\n      cart: currentUserCart\n    });\n    let b = JSON.stringify(this.carts['products']);\n    return this.http.post(this.baseUrl + 'carts', body, {\n      headers: this.headers\n    });\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Cart","CartService","removeFromCart","item","Error","constructor","router","http","carts","getCurrentUserCart","userEmail","localStorage","getItem","cart","addProductToCart","product","existingProduct","products","find","p","title","qty","totalPrice","price","push","Totalprice","removeProductFromCart","index","indexOf","splice","quantity","QuantityUp","QuantityDown","getItems","gettotalprice","clearCart","makePayment","User","alert","navigateByUrl","paymentMade","saveCart","subscribe","currentUserCart","body","JSON","stringify","b","post","baseUrl","headers","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart } from '../model/cart';\nimport { CartProduct } from '../model/cart';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  removeFromCart(item: any) {\n    throw new Error('Method not implemented.');\n  }\n  private carts: { [userId: string]: Cart } = {};\n  baseUrl:string=\"http://localhost:3000/\";\n  headers={'content-type':'application/json'}\n  constructor(private router:Router,private http: HttpClient){\n    this.carts['anonymous']=new Cart();\n\n   }\n  \n   getCurrentUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if(userEmail===null){\n      return this.carts['anonymous'];\n    }\n    let cart = this.carts[userEmail];\n    if (!cart) {\n      cart = new Cart;\n      this.carts[userEmail] = cart;\n      \n    }\n    return cart;\n  }\n\n\n\n\n\n  addProductToCart(product: CartProduct): void {\n    \n    const cart = this.getCurrentUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n        existingProduct.qty++;\n        cart.totalPrice += product.product.price;\n    } else {\n        cart.products.push(product);\n        cart.Totalprice += product.product.price;\n    }\n  }\n\n\n  \n  removeProductFromCart(product: CartProduct): void {\n    \n    const cart = this.getCurrentUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.Totalprice -= product.product.price * product.quantity;\n    }\n  }\n  \n  QuantityUp(product: CartProduct): void {\n    const cart = this.getCurrentUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].quantity += 1;\n      cart.Totalprice += product.product.price;\n    }\n  }\n  \n  QuantityDown(product: CartProduct): void {\n    const cart = this.getCurrentUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].quantity -= 1;\n      cart.Totalprice -= product.product.price;\n    }\n  }\n  \n  getItems(): CartProduct[] {\n    const cart = this.getCurrentUserCart();\n    return cart.products;\n  }\n  \n  gettotalprice(): number {\n    const cart = this.getCurrentUserCart();\n    return cart.Totalprice;\n  }\n  \n  clearCart(): CartProduct[] {\n    const cart = this.getCurrentUserCart();\n    cart.products = [];\n    cart.Totalprice = 0;\n    return cart.products;\n    \n  }\n \n  makePayment(): void {\n    const cart = this.getCurrentUserCart();\n    const userEmail = localStorage.getItem('user');\n    if (cart.User === null){\n      alert(\"you must be logged in to make the payment\");\n      this.router.navigateByUrl('/profile/login'); // navigate the user to the login page\n    } else if(userEmail) {\n\n      alert(\"Payment Successful\");\n      cart.paymentMade = true;\n      this.saveCart().subscribe(); \n      this.clearCart();\n    } \n  }\n  saveCart(): Observable<any> {\n    const currentUserCart = this.getCurrentUserCart();\n    let body = JSON.stringify({ cart: currentUserCart });   \n     let b = JSON.stringify(this.carts['products']);\n\n    return this.http.post(this.baseUrl+'carts',body,{\n      headers:this.headers\n    })\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}