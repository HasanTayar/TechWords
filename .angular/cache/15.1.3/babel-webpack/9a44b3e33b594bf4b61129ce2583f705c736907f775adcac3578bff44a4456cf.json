{"ast":null,"code":"import { Cart, CartProduct } from '../model/cart';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.cartUrl = 'http://localhost:3000/cart';\n    this.carts = [];\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      return of(result);\n    };\n  }\n  getCarts() {\n    return this.http.get(this.cartUrl).pipe(catchError(this.handleError('getCarts', [])));\n  }\n  getCart(id) {\n    return this.http.get(`${this.cartUrl}/${id}`).pipe(catchError(this.handleError(`getCart id=${id}`)));\n  }\n  addCart(cart) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.cartUrl, cart, httpOptions).pipe(catchError(this.handleError('addCart')));\n  }\n  updateCart(cart) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.put(`${this.cartUrl}/${cart.id}`, cart, httpOptions).pipe(catchError(this.handleError('updateCart')));\n  }\n  deleteCart(cart) {\n    return this.http.delete(`${this.cartUrl}/${cart.id}`).pipe(catchError(this.handleError('deleteCart')));\n  }\n  saveCartToLocalStorage(cart) {\n    const userEmail = localStorage.getItem('user');\n    localStorage.setItem(`cart_${userEmail}`, JSON.stringify(cart));\n  }\n  getUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    const localStorageCart = localStorage.getItem(`cart_${userEmail}`);\n    if (!localStorageCart) {\n      // local storage does not have a cart for this user, so return an empty cart\n      return new Cart();\n    }\n    // local storage has a cart for this user, so parse the JSON string and return the Cart object\n    return JSON.parse(localStorageCart);\n  }\n  addProductToCart(product) {\n    const cart = this.getUserCart();\n    const productIndex = cart.products.findIndex(p => p.product.serialNumber === product.serialNumber);\n    if (productIndex === -1) {\n      // product is not in the cart, so add it\n      cart.products.push(new CartProduct(product, 1));\n    } else {\n      // product is already in the cart, so increment its quantity\n      cart.products[productIndex].qty++;\n    }\n    // save the updated cart to local storage\n    this.saveCartToLocalStorage(cart);\n  }\n  removeProductFromCart(product) {\n    const cart = this.getUserCart();\n    const productIndex = cart.products.findIndex(p => p.product.id === product.id);\n    if (productIndex === -1) {\n      // product is not in the cart, so do nothing\n      return;\n    }\n    // product is in the cart, so decrement its quantity\n    cart.products[productIndex].quantity--;\n    if (cart.products[productIndex].quantity === 0) {\n      // product quantity is zero, so remove the product from the cart\n      cart.products.splice(productIndex, 1);\n    }\n    // save the updated cart to local storage\n    this.saveCartToLocalStorage(cart);\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Cart","CartProduct","HttpHeaders","catchError","of","CartService","constructor","router","http","handleError","operation","result","error","console","getCarts","get","cartUrl","pipe","getCart","id","addCart","cart","httpOptions","headers","post","updateCart","put","deleteCart","delete","saveCartToLocalStorage","userEmail","localStorage","getItem","setItem","JSON","stringify","getUserCart","localStorageCart","parse","addProductToCart","product","productIndex","products","findIndex","p","serialNumber","push","qty","removeProductFromCart","quantity","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart, CartProduct } from '../model/cart';\nimport { Product } from '../model/product';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cartUrl = 'http://localhost:3000/cart';\n  private carts: Cart[] = [];\n  \n  constructor(private router: Router, private http: HttpClient) { }\n  \n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n  getCarts(): Observable<Cart[]> {\n    return this.http.get<Cart[]>(this.cartUrl).pipe(\n      catchError(this.handleError<Cart[]>('getCarts', []))\n    );\n  }\n\n  getCart(id: number): Observable<Cart> {\n    return this.http.get<Cart>(`${this.cartUrl}/${id}`).pipe(\n      catchError(this.handleError<Cart>(`getCart id=${id}`))\n    );\n  }\n\n  addCart(cart: Cart): Observable<Cart> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.post<Cart>(this.cartUrl, cart, httpOptions).pipe(\n      catchError(this.handleError<Cart>('addCart'))\n    );\n  }\n\n  updateCart(cart: Cart): Observable<Cart> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.put<Cart>(`${this.cartUrl}/${cart.id}`, cart, httpOptions).pipe(\n      catchError(this.handleError<Cart>('updateCart'))\n    );\n  }\n\n  deleteCart(cart: Cart): Observable<Cart> {\n    return this.http.delete<Cart>(`${this.cartUrl}/${cart.id}`).pipe(\n      catchError(this.handleError<Cart>('deleteCart'))\n    );\n  }\n\n  saveCartToLocalStorage(cart: Cart): void {\n    const userEmail = localStorage.getItem('user');\n    localStorage.setItem(`cart_${userEmail}`, JSON.stringify(cart));\n  }\n\n  getUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n\n    const localStorageCart = localStorage.getItem(`cart_${userEmail}`);\n    if (!localStorageCart) {\n      // local storage does not have a cart for this user, so return an empty cart\n      return new Cart();\n    }\n\n    // local storage has a cart for this user, so parse the JSON string and return the Cart object\n    return JSON.parse(localStorageCart);\n  }\n\n  addProductToCart(product: Product): void {\n    const cart = this.getUserCart();\n    const productIndex = cart.products.findIndex(p => p.product.serialNumber === product.serialNumber);\n    if (productIndex === -1) {\n      // product is not in the cart, so add it\n      cart.products.push(new CartProduct(product, 1));\n    } else {\n      // product is already in the cart, so increment its quantity\n      cart.products[productIndex].qty++;\n    }\n\n    // save the updated cart to local storage\n    this.saveCartToLocalStorage(cart);\n  }\n\n  removeProductFromCart(product: Product): void {\n    const cart = this.getUserCart();\n    const productIndex = cart.products.findIndex(p => p.product.id === product.id);\n    if (productIndex === -1) {\n      // product is not in the cart, so do nothing\n      return;\n    }\n\n    // product is in the cart, so decrement its quantity\n    cart.products[productIndex].quantity--;\n    if (cart.products[productIndex].quantity === 0) {\n      // product quantity is zero, so remove the product from the cart\n      cart.products.splice(productIndex, 1);\n    }\n\n    // save the updated cart to local storage\n    this.saveCartToLocalStorage(cart);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}