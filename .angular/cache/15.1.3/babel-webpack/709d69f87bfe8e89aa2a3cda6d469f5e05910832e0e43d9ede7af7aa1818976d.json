{"ast":null,"code":"import { Cart, CartProduct } from '../model/cart';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.cartUrl = 'http://localhost:3000/cart ';\n    this.carts = [];\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      return of(result);\n    };\n  }\n  saveCartToDB(cart) {\n    const userEmail = localStorage.getItem('user');\n    localStorage.setItem(`cart_${userEmail}`, JSON.stringify(cart));\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(this.cartUrl, cart, httpOptions).pipe(catchError(this.handleError('saveCartToDB')));\n  }\n  getUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    const cart = this.carts.find(c => c.user === userEmail);\n    if (!cart) {\n      const newCart = new Cart();\n      newCart.user = userEmail;\n      this.carts.push(newCart);\n      return newCart;\n    }\n    return cart;\n  }\n  clearCart() {\n    let cart = this.getUserCart();\n    cart = new Cart();\n    this.saveCartToDB(cart);\n  }\n  addToCart(product) {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n      existingProduct.qty++;\n      cart.totalPrice += product.product.price;\n    } else {\n      cart.products.push(product);\n      cart.totalPrice += product.product.price;\n    }\n    this.saveCartToDB(cart);\n  }\n  removeFromCart(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n    // Replace the local storage save with an HTTP request to the server\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n  quantityUp(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n  quantityDown(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n  payment() {\n    const cart = this.getUserCart();\n    cart.paid = true;\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartProduct };","map":{"version":3,"mappings":"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","names":["Cart","CartProduct","HttpHeaders","catchError","of","CartService","constructor","router","http","handleError","operation","result","error","console","saveCartToDB","cart","userEmail","localStorage","getItem","setItem","JSON","stringify","httpOptions","headers","post","cartUrl","pipe","getUserCart","carts","find","c","user","newCart","push","clearCart","addToCart","product","existingProduct","products","p","title","qty","totalPrice","price","removeFromCart","index","indexOf","splice","put","id","subscribe","log","quantityUp","quantityDown","payment","paid","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart, CartProduct } from '../model/cart';\nimport { Product } from '../model/product';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cartUrl = 'http://localhost:3000/cart ';\n  private carts: Cart[] = [];\n  \n  constructor(private router: Router, private http: HttpClient) { }\n  \n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n\n  saveCartToDB(cart: Cart): Observable<Cart> {\n    const userEmail = localStorage.getItem('user');\n    localStorage.setItem(`cart_${userEmail}`, JSON.stringify(cart));\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n\n    return this.http.post<Cart>(this.cartUrl, cart, httpOptions).pipe(\n      catchError(this.handleError<Cart>('saveCartToDB'))\n    );\n  }\n \n\n  getUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n\n    const cart = this.carts.find(c => c.user === userEmail);\n    if (!cart) {\n      const newCart = new Cart();\n      newCart.user = userEmail;\n      this.carts.push(newCart);\n      return newCart;\n    }\n\n    return cart;\n  }\n  clearCart() {\n    let cart = this.getUserCart();\n    cart = new Cart();\n    this.saveCartToDB(cart);\n  }\n\n  addToCart(product: CartProduct): void {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n        existingProduct.qty++;\n        cart.totalPrice += product.product.price;\n    } else {\n        cart.products.push(product);\n        cart.totalPrice += product.product.price;\n    }\n\n    this.saveCartToDB(cart);\n  }\n\n\n  removeFromCart(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n\n    // Replace the local storage save with an HTTP request to the server\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n\n  quantityUp(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n  \n  quantityDown(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n  \n  payment() {\n    const cart = this.getUserCart();\n    cart.paid = true;\n\n    this.http.put(`${this.cartUrl}/${cart.id}`, cart).subscribe(() => {\n      console.log(`Cart updated successfully`);\n    });\n  }\n}\n  \nexport { CartProduct };\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}