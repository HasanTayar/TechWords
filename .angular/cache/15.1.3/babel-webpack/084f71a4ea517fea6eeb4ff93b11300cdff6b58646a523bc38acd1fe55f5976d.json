{"ast":null,"code":"import { Cart } from '../model/cart';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.cart = {};\n    this.cart[0] = new Cart();\n  }\n  getUserCart() {\n    const userEmail = localStorage.getItem('user');\n    if (userEmail == null) {\n      return this.cart[0];\n    }\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    let cart = this.cart[userEmail];\n    if (!cart) {\n      cart = new Cart();\n      this.cart[userEmail] = cart;\n    }\n    return cart;\n  }\n  addToCart(product) {\n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n      existingProduct.qty++;\n      cart.totalPrice += product.product.price;\n    } else {\n      alert(\"iteam added to cart\");\n      cart.products.push(product);\n      cart.totalPrice += product.product.price;\n    }\n  }\n  removeFromCart(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n  }\n  quantityUp(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n  }\n  quantityDown(product) {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n  }\n  getItems() {\n    const cart = this.getUserCart();\n    return cart.products;\n  }\n  getTotalPrice() {\n    const cart = this.getUserCart();\n    return cart.totalPrice;\n  }\n  clearCart() {\n    const cart = this.getUserCart();\n    cart.products = [];\n    cart.totalPrice = 0;\n    return cart.products;\n  }\n  payment() {\n    const cart = this.getUserCart();\n    const userEmail = localStorage.getItem('user');\n    if (cart.user === userEmail && userEmail != null) {\n      alert(\"Payment Successful\");\n      cart.paid = true;\n      this.http.post('http://localhost:3000/cart', {\n        email: userEmail,\n        products: cart.products,\n        totalPrice: cart.totalPrice\n      }).subscribe(res => {\n        console.log('Checkout data sent successfully', res);\n      });\n      this.clearCart();\n    } else {\n      alert(\"you must be logged in to make the payment\");\n      this.router.navigate(['/profile/login']);\n    }\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Cart","CartService","constructor","router","http","cart","getUserCart","userEmail","localStorage","getItem","addToCart","product","existingProduct","products","find","p","title","qty","totalPrice","price","alert","push","removeFromCart","index","indexOf","splice","quantityUp","quantityDown","getItems","getTotalPrice","clearCart","payment","user","paid","post","email","subscribe","res","console","log","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hasan\\MyWeb\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Cart, CartProduct } from '../model/cart';\nimport { Product } from '../model/product';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart: { [userId: string]: Cart } = {};\n  \n  constructor(private router: Router , private http: HttpClient) { \n    this.cart[0] = new Cart()\n  }\n\n  getUserCart(): Cart {\n    const userEmail = localStorage.getItem('user');\n    if(userEmail==null){\n      return this.cart[0];\n    }\n    if (!userEmail) {\n      // userEmail is not stored in local storage, so return an empty cart\n      return new Cart();\n    }\n    let cart = this.cart[userEmail];\n    if (!cart) {\n      cart = new Cart();\n      this.cart[userEmail] = cart;\n    }\n    return cart;\n  }\n\n\n\n\n  addToCart(product: CartProduct): void {\n    \n    const cart = this.getUserCart();\n    let existingProduct = cart.products.find(p => p.product.title === product.product.title);\n    if (existingProduct) {\n        existingProduct.qty++;\n        cart.totalPrice += product.product.price;\n    } else {\n      alert(\"iteam added to cart\")\n        cart.products.push(product);\n        cart.totalPrice += product.product.price;\n    }\n  }\n\n\n  \n  removeFromCart(product: CartProduct): void {\n    \n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products.splice(index, 1);\n      cart.totalPrice -= product.product.price * product.qty;\n    }\n  }\n  \n  quantityUp(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty += 1;\n      cart.totalPrice += product.product.price;\n    }\n  }\n  \n  quantityDown(product: CartProduct): void {\n    const cart = this.getUserCart();\n    const index = cart.products.indexOf(product);\n    if (index > -1) {\n      cart.products[index].qty -= 1;\n      cart.totalPrice -= product.product.price;\n    }\n  }\n  \n  getItems(): CartProduct[] {\n    const cart = this.getUserCart();\n    return cart.products;\n  }\n  \n  getTotalPrice(): number {\n    const cart = this.getUserCart();\n    return cart.totalPrice;\n  }\n  \n  clearCart(): CartProduct[] {\n    const cart = this.getUserCart();\n    cart.products = [];\n    cart.totalPrice = 0;\n    return cart.products;\n  }\n  \n  payment(): void {\n    const cart = this.getUserCart();\n    const userEmail = localStorage.getItem('user');\n    if (cart.user === userEmail&& userEmail!=null) {\n      alert(\"Payment Successful\");\n      cart.paid = true;\n      this.http.post('http://localhost:3000/cart', {\n        email: userEmail,\n        products: cart.products,\n        totalPrice: cart.totalPrice\n      }).subscribe(res => {\n        console.log('Checkout data sent successfully', res);\n      });\n      this.clearCart();\n    } else {\n      alert(\"you must be logged in to make the payment\");\n      this.router.navigate(['/profile/login'])}}\n  \n  \n  \n  \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}