{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiURL = 'http://localhost:3000/';\n    this.headers = {\n      'content-type': 'application/json'\n    };\n    this.currentUser = \"\";\n    this.users = [];\n  }\n  getUsers() {\n    return this.http.get(this.apiURL + 'users').pipe(catchError(this.handleError));\n  }\n  isExists(mail) {\n    for (let user of this.users) {\n      if (mail == user.email) return true;\n    }\n    return false;\n  }\n  addUser(user) {\n    let body = JSON.stringify(user);\n    return this.http.post('http://localhost:5000/users/register', body, {\n      headers: this.headers\n    }).pipe(catchError(this.handleError));\n  }\n  login(email, password) {\n    return this.http.get(this.apiURL + 'users').pipe(map(users => {\n      const user = users.find(user => user.email === email && user.password === password);\n      if (user) {\n        try {\n          localStorage.setItem('user', email);\n        } catch (error) {\n          console.error(error);\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }), switchMap(isValidLogin => {\n      if (isValidLogin) {\n        this.currentUser = email;\n        this.router.navigate(['/profile']);\n        return of(true);\n      } else {\n        return of(false);\n      }\n    }));\n  }\n  logout() {\n    this.currentUser = \"\";\n    localStorage.removeItem('user');\n    return Promise.resolve();\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","throwError","catchError","map","switchMap","UsersService","constructor","router","http","getUsers","get","apiURL","pipe","handleError","isExists","mail","user","users","email","addUser","body","JSON","stringify","post","headers","login","password","find","localStorage","setItem","error","console","isValidLogin","currentUser","navigate","logout","removeItem","Promise","resolve","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["/home/hasan/Desktop/Projects/TechWords/Client/src/app/services/users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { User } from '../model/user';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { NavbarComponent } from '../navbar/navbar.component';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  apiURL: string = 'http://localhost:3000/';\n  headers = {'content-type':'application/json'};\n\n  currentUser: string = \"\"\n  users : User[] =[]\n  constructor(private router: Router, private http:HttpClient) { }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiURL + 'users').pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  isExists(mail : String){\n    for(let user of this.users){\n      if(mail == user.email)\n        return true\n    }\n    return false\n  }\n\n  addUser(user: User): Observable<any> {\n    let body = JSON.stringify(user)\n    return this.http.post('http://localhost:5000/users/register', body, {\n      headers: this.headers\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.get<User[]>(this.apiURL + 'users')\n      .pipe(\n        map(users => {\n          const user = users.find(user => user.email === email && user.password === password);\n          if (user) {\n            try {\n              localStorage.setItem('user', email);\n            } catch (error) {\n              console.error(error);\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }),\n        switchMap(isValidLogin => {\n          if (isValidLogin) {\n            this.currentUser = email;\n            this.router.navigate(['/profile']);\n            return of(true);\n          } else {\n            return of(false);\n          }\n        }),\n      );\n  }\n \n \n  logout(): Promise<void> {\n    this.currentUser = \"\";\n    localStorage.removeItem('user');\n    return Promise.resolve();\n  }\n\n  \n  \n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    return throwError(\n      'Something bad happened; please try again later.');\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}