{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.apiURL = 'http://localhost:5000/users';\n    this.headers = {\n      'content-type': 'application/json'\n    };\n    this.currentUser = new BehaviorSubject(localStorage.getItem('user') || \"\");\n    this.users = [];\n  }\n  getUsers() {\n    return this.http.get(`${this.apiURL}/get-users`).pipe(catchError(this.handleError));\n  }\n  isExists(mail) {\n    for (let user of this.users) {\n      if (mail == user.email) return true;\n    }\n    return false;\n  }\n  addUser(user) {\n    let body = JSON.stringify(user);\n    return this.http.post(`${this.apiURL}/register`, body, {\n      headers: this.headers\n    }).pipe(catchError(this.handleError));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiURL}/login`, {\n      email,\n      password\n    }, {\n      headers: this.headers\n    }).pipe(map(user => {\n      if (user) {\n        try {\n          localStorage.setItem('user', email);\n          this.currentUser.next(email);\n        } catch (error) {\n          console.error(error);\n        }\n        return true;\n      } else {\n        return false;\n      }\n    }), switchMap(isValidLogin => {\n      if (isValidLogin) {\n        this.currentUser.next(email);\n        this.router.navigate(['/profile']);\n        return of(true);\n      } else {\n        return of(false);\n      }\n    }), catchError(this.handleError));\n  }\n  logout() {\n    localStorage.removeItem('user');\n    this.currentUser.next(\"\");\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","throwError","catchError","map","switchMap","BehaviorSubject","UsersService","constructor","router","http","localStorage","getItem","getUsers","get","apiURL","pipe","handleError","isExists","mail","user","users","email","addUser","body","JSON","stringify","post","headers","login","password","setItem","currentUser","next","error","console","isValidLogin","navigate","logout","removeItem","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["/home/hasan/Desktop/Projects/TechWords/Client/src/app/services/users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { User } from '../model/user';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  apiURL: string = 'http://localhost:5000/users';\n  headers = {'content-type':'application/json'};\n\n  currentUser: BehaviorSubject<string> = new BehaviorSubject<string>(localStorage.getItem('user') || \"\");\n  users : User[] =[]\n  \n  constructor(private router: Router, private http:HttpClient) { }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(`${this.apiURL}/get-users`).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  isExists(mail : String){\n    for(let user of this.users){\n      if(mail == user.email)\n        return true\n    }\n    return false\n  }\n\n  addUser(user: User): Observable<any> {\n    let body = JSON.stringify(user)\n    return this.http.post(`${this.apiURL}/register`, body, {\n      headers: this.headers\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.post<User[]>(`${this.apiURL}/login`, {email, password}, {\n      headers: this.headers\n    })\n      .pipe(\n        map(user => {\n          if (user) {\n            try {\n              localStorage.setItem('user', email);\n              this.currentUser.next(email);\n            } catch (error) {\n              console.error(error);\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }),\n        switchMap(isValidLogin => {\n          if (isValidLogin) {\n            this.currentUser.next(email);\n            this.router.navigate(['/profile']);\n            return of(true);\n          } else {\n            return of(false);\n          }\n        }),\n        catchError(this.handleError)\n      )\n      \n  }\n\n  logout(): void {\n    localStorage.removeItem('user');\n    this.currentUser.next(\"\");\n}\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n    } else {\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    return throwError(\n      'Something bad happened; please try again later.');\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}