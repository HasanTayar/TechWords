{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class CartService {\n  gettotalprice() {\n    throw new Error('Method not implemented.');\n  }\n  QuantityUp(product) {\n    throw new Error('Method not implemented.');\n  }\n  quantityDown(product) {\n    throw new Error('Method not implemented.');\n  }\n  removeFromCart(item) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000/\";\n    this.headers = {\n      'content-type': 'application/json'\n    };\n  }\n  getCurrentUserCart() {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`${this.baseUrl}carts/${userEmail}`, {\n      headers: this.headers\n    });\n  }\n  addProductToCart(product) {\n    const userEmail = localStorage.getItem('user');\n    return this.http.post(`${this.baseUrl}carts/${userEmail}/add`, product, {\n      headers: this.headers\n    });\n  }\n  removeProductFromCart(product) {\n    const userEmail = localStorage.getItem('user');\n    return this.http.post(`${this.baseUrl}carts/${userEmail}/remove`, product, {\n      headers: this.headers\n    });\n  }\n  updateProductQuantity(product, change) {\n    const userEmail = localStorage.getItem('user');\n    return this.http.put(`${this.baseUrl}carts/${userEmail}/updateQty`, {\n      product,\n      change\n    }, {\n      headers: this.headers\n    });\n  }\n  getItems() {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`${this.baseUrl}carts/${userEmail}/items`, {\n      headers: this.headers\n    });\n  }\n  getTotalPrice() {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`${this.baseUrl}carts/${userEmail}/totalPrice`, {\n      headers: this.headers\n    });\n  }\n  clearCart() {\n    const userEmail = localStorage.getItem('user');\n    return this.http.delete(`${this.baseUrl}carts/${userEmail}/clear`, {\n      headers: this.headers\n    });\n  }\n  Payment() {\n    const userEmail = localStorage.getItem('user');\n    if (userEmail === null) {\n      alert(\"you must be logged in to make the payment\");\n      this.router.navigateByUrl('/login');\n    } else {\n      this.http.post(`${this.baseUrl}carts/${userEmail}/pay`, {}, {\n        headers: this.headers\n      }).subscribe(() => {\n        alert(\"Payment Successful\");\n        this.clearCart().subscribe();\n      }, error => console.error(error));\n    }\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["CartService","gettotalprice","Error","QuantityUp","product","quantityDown","removeFromCart","item","constructor","router","http","getCurrentUserCart","userEmail","localStorage","getItem","get","baseUrl","headers","addProductToCart","post","removeProductFromCart","updateProductQuantity","change","put","getItems","getTotalPrice","clearCart","delete","Payment","alert","navigateByUrl","subscribe","error","console","factory","providedIn"],"sourceRoot":"","sources":["/home/hasan/Desktop/Projects/TechWords/Client/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CartProduct } from '../model/cart';\nimport { CartProduct } from '../model/cart';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  gettotalprice(): number {\n    throw new Error('Method not implemented.');\n  }\n  QuantityUp(product: CartProduct) {\n    throw new Error('Method not implemented.');\n  }\n  quantityDown(product: CartProduct) {\n    throw new Error('Method not implemented.');\n  }\n  removeFromCart(item: any) {\n    throw new Error('Method not implemented.');\n  }\n  baseUrl: string = \"http://localhost:5000/\";\n  headers = { 'content-type': 'application/json' }\n\n  constructor(private router: Router, private http: HttpClient) { }\n\n  getCurrentUserCart(): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`${this.baseUrl}carts/${userEmail}`, { headers: this.headers });\n  }\n\n  addProductToCart(product: any): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.post(`${this.baseUrl}carts/${userEmail}/add`, product, { headers: this.headers });\n  }\n\n  removeProductFromCart(product: any): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.post(`${this.baseUrl}carts/${userEmail}/remove`, product, { headers: this.headers });\n  }\n\n  updateProductQuantity(product: any, change: number): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.put(`${this.baseUrl}carts/${userEmail}/updateQty`, { product, change }, { headers: this.headers });\n  }\n\n  getItems(): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`${this.baseUrl}carts/${userEmail}/items`, { headers: this.headers });\n  }\n\n  getTotalPrice(): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.get(`${this.baseUrl}carts/${userEmail}/totalPrice`, { headers: this.headers });\n  }\n\n  clearCart(): Observable<any> {\n    const userEmail = localStorage.getItem('user');\n    return this.http.delete(`${this.baseUrl}carts/${userEmail}/clear`, { headers: this.headers });\n  }\n\n  Payment(): void {\n    const userEmail = localStorage.getItem('user');\n    if (userEmail === null) {\n      alert(\"you must be logged in to make the payment\");\n      this.router.navigateByUrl('/login');\n    } else {\n      this.http.post(`${this.baseUrl}carts/${userEmail}/pay`, {}, { headers: this.headers }).subscribe(\n        () => {\n          alert(\"Payment Successful\");\n          this.clearCart().subscribe();\n        },\n        error => console.error(error)\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}